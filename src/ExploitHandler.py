from Model_client import AzureClient
import json  
import subprocess


def runExploits(user_query):
    print("üîç Running exploit functions...")

    yield json.dumps({'data': "Running exploit functions ...", 'istool': False, 'tool_out': ''}) + "\n"

    client = AzureClient.get_client()
    deployment = AzureClient.deployment

    response = client.chat.completions.create(
        model=deployment,
        messages=[
            {"role": "system", "content": "You are a cyber bot and your task is to run exploit tools based on user queries."},
            {"role": "user", "content": user_query},
        ],
        functions=functions,
        stream=False
    )

    out = response.choices[0].message.function_call
    output = ""

    if out is not None:
        func_name = out.name
        try:
            func_args = json.loads(out.arguments)
            print(func_args)
            command = func_args.get('command')
            print(command)
        except Exception as e:
            yield json.dumps({
                "data": f"‚ùå Error parsing arguments: {e}",
                "istool": False,
                "tool_out": ""
            }) + "\n"
            return

        if func_name == "SearchSploitRun":
            yield json.dumps({'data': f"Running ... {command}", 'istool': False, 'tool_out': ''}) + "\n"
            output = SearchSploitRun(command)
            yield json.dumps({"data": "‚úÖ Task completed.", "istool": True, "tool_out": output}) + "\n"

        elif func_name == "hydraTool":
            yield json.dumps({'data': f"Running ... {command}", 'istool': False, 'tool_out': ''}) + "\n"
            output = hydraTool(command)
            yield json.dumps({"data": "‚úÖ Task completed.", "istool": True, "tool_out": output}) + "\n"

            response = client.chat.completions.create(
                model=deployment,
                messages=[
                    {"role": "system", "content": "You are a cyber bot and your task is to define findings from the tool that was run, especially exploit-based tools."},
                    {"role": "user", "content": user_query + " So hydra tool was run and the output of the tool is :- " + output},
                ],
                stream=True
            )

            for chunk in response:
                if chunk.choices and hasattr(chunk.choices[0], "delta") and chunk.choices[0].delta:
                    content = chunk.choices[0].delta.content
                    if content:
                        yield json.dumps({"data": content, "istool": False, "tool_out": ""}) + "\n"

        else:
            yield json.dumps({
                "data": "‚ùå Unknown function call received.",
                "istool": False,
                "tool_out": output
            }) + "\n"

    else:
        yield json.dumps({
            "data": "‚ùå No function call received.",
            "istool": False,
            "tool_out": output
        }) + "\n"


functions = [
    {
        "name": "SearchSploitRun",
        "description": "Searches Exploit-DB for known vulnerabilities and exploits based on user queries.",
        "parameters": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "string",
                    "description": "A single searchsploit command to run. Examples:\n"
                                   "- `searchsploit apache`\n"
                                   "- `searchsploit CVE-2021-41773`\n"
                                   "- `searchsploit -m 49721`\n"
                                   "- `searchsploit -w openssh`\n"
                                   "- `searchsploit --cve 2022-22965`"
                }
            },
            "required": ["command"]
        }
    },
     {
  "name": "hydraTool",
  "description": "Generate a Hydra command to perform a brute-force attack. If the user does not specify a password file, use 'rockyou.txt' from the current directory by default.",
  "parameters": {
    "type": "object",
    "properties": {
      "command": {
        "type": "string",
        "description": """The full Hydra command to execute. Must include service, target, and login/password information. If no password file is provided, default to './rockyou.txt'.
        Examples:
  hydra -l user -P passlist.txt ftp://192.168.0.1
  hydra -L userlist.txt -p defaultpw imap://192.168.0.1/PLAIN
  hydra -C defaults.txt -6 pop3s://[2001:db8::1]:143/TLS:DIGEST-MD5
  hydra -l admin -p password ftp://[192.168.0.0/24]/
  hydra -L logins.txt -P pws.txt -M targets.txt ssh"""
      }
    },
    "required": ["command"]
  }
}

]


# the below tool searchexploit and hydratool can be merged but for now,its seperated incase if we need to ahve somedifferent implementation
def hydraTool(command):
    print(f"üîç Running SearchSploit with command: {command}")

    command_list = command.split(" ")

    result = subprocess.run(command_list, capture_output=True, text=True)

    output = ""
    if result.stdout:
        output += result.stdout
    if result.stderr:
        output += f"\n‚ùå Errors: {result.stderr}"
    
    return output  


def SearchSploitRun(command):
    print(f"üîç Running SearchSploit with command: {command}")

    command_list = command.split(" ")

    result = subprocess.run(command_list, capture_output=True, text=True)

    output = ""
    if result.stdout:
        output += result.stdout
    if result.stderr:
        output += f"\n‚ùå Errors: {result.stderr}"
    
    return output  
